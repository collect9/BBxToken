// SPDX-License-Identifier: MIT
pragma solidity >=0.8.17;

contract A {

    /**
     * @dev Optimized SVG flags. Storage of these would cost around ~2.2M gas.
     */
    bytes constant FLG_BLK = ""
        "<pattern id='ptrn' width='.1' height='.1'>"
        "<rect width='64' height='48' fill='#def' stroke='#000'/>"
        "</pattern>"
        "<path d='M0 0h640v480H0z' fill='url(#ptrn)'/>";
    bytes constant FLG_CAN = ""
        "<path fill='#fff' d='M0 0h640v480H0z'/>"
        "<path fill='#d21' d='M-19.7 0h169.8v480H-19.7zm509.5 0h169.8v480H489.9zM201 232l-13.3 4.4 61.4 54c4.7 13.7-1.6 "
        "17.8-5.6 25l66.6-8.4-1.6 67 13.9-.3-3.1-66.6 66.7 8c-4.1-8.7-7.8-13.3-4-27.2l61.3-51-10.7-4c-8.8-6.8 3.8-32.6 "
        "5.6-48.9 0 0-35.7 12.3-38 5.8l-9.2-17.5-32.6 35.8c-3.5.9-5-.5-5.9-3.5l15-74.8-23.8 13.4c-2 .9-4 .1-5.2-2.2l-23-46-23.6 "
        "47.8c-1.8 1.7-3.6 1.9-5 .7L264 130.8l13.7 74.1c-1.1 3-3.7 3.8-6.7 2.2l-31.2-35.3c-4 6.5-6.8 17.1-12.2 19.5-5.4 "
        "2.3-23.5-4.5-35.6-7 4.2 14.8 17 39.6 9 47.7z'/>";
    bytes constant FLG_CHN = ""
        "<g id='c9chn'>"
        "<path fill='#ff0' d='M-.6.8 0-1 .6.8-1-.3h2z'/>"
        "</g>"
        "<path fill='#e12' d='M0 0h640v480H0z'/>"
        "<use href='#c9chn' transform='matrix(72 0 0 72 120 120)'/>"
        "<use href='#c9chn' transform='matrix(-12.3 -20.6 20.6 -12.3 240.3 48)'/>"
        "<use href='#c9chn' transform='matrix(-3.4 -23.8 23.8 -3.4 288 96)'/>"
        "<use href='#c9chn' transform='matrix(6.6 -23 23 6.6 288 168)'/>"
        "<use href='#c9chn' transform='matrix(15 -18.7 18.7 15 240 216)'/>";
    bytes constant FLG_GER = ""
        "<path fill='#fc0' d='M0 320h640v160H0z'/>"
        "<path d='M0 0h640v160H0z'/>"
        "<path fill='#d00' d='M0 160h640v160H0z'/>";
    bytes constant FLG_IND = ""
        "<path fill='#e01' d='M0 0h640v249H0z'/>"
        "<path fill='#fff' d='M0 240h640v240H0z'/>";
    bytes constant FLG_KOR = ""
        "<defs>"
        "<clipPath id='c9kor1'>"
        "<path fill-opacity='.7' d='M-95.8-.4h682.7v512H-95.8z'/>"
        "</clipPath>"
        "</defs>"
        "<g fill-rule='evenodd' clip-path='url(#c9kor1)' transform='translate(89.8 .4) scale(.94)'>"
        "<path fill='#fff' d='M-95.8-.4H587v512H-95.8Z'/>"
        "<g transform='rotate(-56.3 361.6 -101.3) scale(10.67)'>"
        "<g id='c9kor2'>"
        "<path id='c9kor3' d='M-6-26H6v2H-6Zm0 3H6v2H-6Zm0 3H6v2H-6Z'/>"
        "<use href='#c9kor3' y='44'/>"
        "</g>"
        "<path stroke='#fff' d='M0 17v10'/>"
        "<path fill='#c33' d='M0-12a12 12 0 0 1 0 24Z'/>"
        "<path fill='#04a' d='M0-12a12 12 0 0 0 0 24A6 6 0 0 0 0 0Z'/>"
        "<circle cy='-6' r='6' fill='#c33'/>"
        "</g>"
        "<g transform='rotate(-123.7 191.2 62.2) scale(10.67)'>"
        "<use href='#c9kor2'/>"
        "<path stroke='#fff' d='M0-23.5v3M0 17v3.5m0 3v3'/>"
        "</g>"
        "</g>";
    bytes constant FLG_UK  = ""
        "<path fill='#026' d='M0 0h640v480H0z'/>"
        "<path fill='#fff' d='m75 0 244 181L562 0h78v62L400 241l240 178v61h-80L320 301 81 480H0v-60l239-178L0 64V0h75z'/>"
        "<path fill='#c12' d='m424 281 216 159v40L369 281h55zm-184 20 6 35L54 480H0l240-179zM640 0v3L391 191l2-44L590 0h50zM0 0l239 176h-60L0 42V0z'/>"
        "<path fill='#fff' d='M241 0v480h160V0H241zM0 160v160h640V160H0z'/>"
        "<path fill='#c12' d='M0 193v96h640v-96H0zM273 0v480h96V0h-96z'/>";
    bytes constant FLG_US  = ""
        "<path fill='#fff' d='M0 0h640v480H0z'/>"
        "<g id='c9uss'>"
        "<path fill='#fff' d='m30.4 11 3.4 10.3h10.6l-8.6 6.3 3.3 10.3-8.7-6.4-8.6 6.3L25 27.6l-8.7-6.3h10.9z'/>"
        "</g>"
        "<g id='c9uso'>"
        "<use href='#c9uss'/>"
        "<use href='#c9uss' y='51.7'/>"
        "<use href='#c9uss' y='103.4'/>"
        "<use href='#c9uss' y='155.1'/>"
        "<use href='#c9uss' y='206.8'/>"
        "</g>"
        "<g id='c9use'>"
        "<use href='#c9uss' y='25.9'/>"
        "<use href='#c9uss' y='77.6'/>"
        "<use href='#c9uss' y='129.5'/>"
        "<use href='#c9uss' y='181.4'/>"
        "</g>"
        "<g id='c9usa'>"
        "<use href='#c9uso'/>"
        "<use href='#c9use' x='30.4'/>"
        "</g>"
        "<path fill='#b02' d='M0 0h640v37H0zm0 73.9h640v37H0zm0 73.8h640v37H0zm0 73.8h640v37H0zm0 74h640v36.8H0zm0 73.7h640v37H0zM0 443h640V480H0z'/>"
        "<path fill='#026' d='M0 0h364.8v259H0z'/>"
        "<use href='#c9usa'/>"
        "<use href='#c9usa' x='60.8'/>"
        "<use href='#c9usa' x='121.6'/>"
        "<use href='#c9usa' x='182.4'/>"
        "<use href='#c9usa' x='243.2'/>"
        "<use href='#c9uso' x='304'/>";

    bytes constant QR_CODE_BASE = ""
        "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' class='c9QRcode' width='100%' height='100%' viewBox='0 0 17 17'>"
        "<style type='text/css'>.c9QRcode{opacity:0.89;} .c9QRcode rect{width:1px;height:1px;}</style>"
        "<rect x='0.5' y='0.5' style='width:6px; height:6px; stroke:#000; fill-opacity:0;'/>"
        "<rect x='2' y='2' style='width:3px; height:3px;'/>"
        "<rect x='15' y='4' style='height:7px;'/>"
        "<rect x='8' y='0'/>"
        "<rect x='10' y='0'/>"
        "<rect x='12' y='0'/>"
        "<rect x='14' y='0'/>"
        "<rect x='16' y='0'/>"
        "<rect x='0' y='8'/>"
        "<rect x='0' y='10'/>"
        "<rect x='0' y='12'/>"
        "<rect x='0' y='14'/>"
        "<rect x='0' y='16'/>"
        "<rect x='16' y='1'/>"
        "<rect x='9' y='2'/>"
        "<rect x='10' y='2'/>"
        "<rect x='13' y='3'/>"
        "<rect x='9' y='4'/>"
        "<rect x='11' y='4'/>"
        "<rect x='12' y='4'/>"
        "<rect x='13' y='5'/>"
        "<rect x='9' y='6'/>"
        "<rect x='11' y='7'/>"
        "<rect x='16' y='7'/>"
        "<rect x='2' y='8'/>"
        "<rect x='5' y='8'/>"
        "<rect x='7' y='8'/>"
        "<rect x='9' y='8'/>"
        "<rect x='10' y='8'/>"
        "<rect x='12' y='8'/>"
        "<rect x='16' y='8'/>"
        "<rect x='13' y='11'/>"
        "<rect x='14' y='11'/>"
        "<rect x='11' y='12'/>"
        "<rect x='12' y='12'/>"
        "<rect x='16' y='12'/>"
        "<rect x='16' y='13'/>"
        "<rect x='15' y='14'/>"
        "<rect x='11' y='15'/>"
        "<rect x='11' y='16'/>"
        "<rect x='12' y='16'/>";

    bytes constant BAR_CODE_BASE = "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' class='c9BARcode' width='100%' height='100%' viewBox='30 0 270 100'>"
        "<style type='text/css'>.c9BARcode{opacity:0.89;} .c9BARcode rect{height:1px;}</style>"
        "<g transform='scale(3 100)'>"
        "<rect x='10' width='1'/>"
        "<rect x='11' width='1'/>"
        "<rect x='13' width='1'/>"
        "<rect x='21' width='1'/>";

    bytes constant SVG_OPENER = ""
        "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' class='c9svg' viewBox='0 0 630 880'>"
        "<style type='text/css'>"
        ".c9svg{font-family:'Courier New';} "
        ".sXXXXXX{font-size:22px;} "
        ".mXXXXXX{font-size:32px;} "
        ".tXXXXXX{font-size:54px;font-weight:700;} "
        ".nXXXXXX{font-size:34px;font-weight:700;}"
        "</style>"
        "<defs>"
        "<radialGradient id='rgXXXXXX' cx='50%' cy='44%' r='50%' gradientUnits='userSpaceOnUse'>"
        "<stop offset='25%' stop-color='#fff'/>"
        "<stop offset='1' stop-color='#e66'/>"
        "</radialGradient>"
        "<filter id='noiser'>"
        "<feTurbulence type='fractalNoise' baseFrequency='0.2' numOctaves='8'/>"
        "<feComposite in2='SourceGraphic' operator='in'/>"
        "<feColorMatrix values='1 0 0 0 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0.2 0'/>"
        "</filter>"
        "<filter id='grayscale'>"
        "<feColorMatrix type='saturate' values='1.0'/>"
        "</filter>"
        "</defs>"
        "<g filter='url(#grayscale)'>"
        "<rect rx='20' width='100%' height='100%' fill='url(#rgXXXXXX)'/>"
        "<rect rx='20' width='100%' height='100%' filter='url(#noiser)'/>"
        "<rect y='560' width='100%' height='22' fill='#ddf' fill-opacity='0.6'/>"
        "<g style='fill:#ded;'>"
        "<rect x='20' y='20' width='590' height='150' rx='10'/>"
        "<rect x='20' y='740' width='590' height='120' rx='10'/>"
        "</g>"
        "<g transform='translate(470 6) scale(0.2)' fill-opacity='0.89'>"
        "<a href='https://collect9.io' target='_blank'>"
        "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 256 276'>"
        "<defs>"
        "<radialGradient id='c9r1' cx='50%' cy='50%' r='50%' gradientUnits='userSpaceOnUse'>"
        "<stop offset='25%' stop-color='#2fd'/>"
        "<stop offset='1' stop-color='#0a6'/>"
        "</radialGradient>"
        "<radialGradient id='c9r2' cx='50%' cy='50%' r='50%' gradientUnits='userSpaceOnUse'>"
        "<stop offset='25%' stop-color='#26f'/>"
        "<stop offset='1' stop-color='#03a'/>"
        "</radialGradient>"
        "<radialGradient id='c9r3' cx='50%' cy='50%' r='50%' gradientUnits='userSpaceOnUse'>"
        "<stop offset='25%' stop-color='#2ff'/>"
        "<stop offset='1' stop-color='#0a9'/>"
        "</radialGradient>"
        "</defs>"
        "<symbol id='c9p'>"
        "<path d='M122.4,2,26,57.5a11,11,0,0,0,0,19.4h0a11,11,0,0,0,11,0l84-48.5V67L74.3,94.3a6,6,"
        "0,0,0,0,10L125,134a6,6,0,0,0,6,0l98.7-57a11,11,0,0,0,0-19.4L133.6,2A11,11,0,0,0,122.4,"
        "2Zm12,65V28.5l76,44-33.5,19.3Z'/>"
        "</symbol>"
        "<use href='#c9p' fill='url(#c9r2)'/>"
        "<use href='#c9p' transform='translate(0 9.3) rotate(240 125 138)' fill='url(#c9r3)'/>"
        "<use href='#c9p' transform='translate(9 4) rotate(120 125 138)' fill='url(#c9r1)'/>"
        "</svg>"
        "</a>"
        "</g>"
        "<g transform='translate(30 58)' class='mXXXXXX'>"
        "<text>COLLECT9</text>"
        "<text y='34'>RWA REDEEMABLE NFT</text>"
        "<g class='sXXXXXX'>"
        "<text y='74'>STATUS: <tspan font-weight='bold' fill='#080'>  VALID                    </tspan>"
        "</text>"
        "<text y='100'>EIP-2981: 3.50%</text>"
        "</g>"
        "</g>"
        "<g transform='translate(30 768)' class='sXXXXXX'>"
        "<text>CLASS: VINTAGE BEANIE BABY</text>"
        "<text y='26'>RARITY TIER:                                 </text>"
        "<text y='52'>ED NUM.MINT ID:   .    </text>"
        "<text y='78'>NFT AGE:   YR   MO   D</text>"
        "</g>"
        "<text x='50%' y='576' fill='#999' text-anchor='middle'>                                        </text>"
        "<g text-anchor='middle'>"
        "<text x='50%' y='645' class='nXXXXXX'>        |        </text>"
        "<text x='50%' y='698' class='tXXXXXX'>";

    address public immutable tokenContract;

    constructor (address _tokenContract) {
        tokenContract = _tokenContract;
    }

    /**
     * @dev Adds the bytes32 + bytes8 representation of the address into the 
     * SVG output memory.
     */
    function _addAddress(address tokenOwner, bytes memory b)
    private pure {
        (bytes32 _a1, bytes8 _a2) = Helpers.addressToB32B8(tokenOwner);
        assembly {
            mstore(add(b, 2907), _a1)
            let dst := add(b, 2939)
            mstore(dst, or(and(mload(dst), not(shl(192, 0xFFFFFFFFFFFFFFFF))), _a2))
        }
    }

    /**
     * @dev Adds the `_id` into the SVG output memory `b`. 
     * Note: this is done so that multiple 
     * SVGs may be displayed on the same page without CSS conflict.
     */
    function _addIds(bytes6 id, bytes memory b)
    private pure {
        uint16[11] memory offsets = [182, 208, 234, 276, 351, 887, 2379, 2457, 2651, 3008, 3070];
        assembly {
            let dst := 0
            for {let i := 0} lt(i, 11) {i := add(i, 1)} {
                dst := add(b, mload(add(offsets, mul(32, i))))
                mstore(dst, or(and(mload(dst), not(shl(208, 0xFFFFFFFFFFFF))), id))
            }
        }
    }

    /**
     * @dev Adds validity flag info to SVG output memory `b`.
     */
    function _addValidityInfo(uint256 tokenId, uint256 uTokenData, bytes memory b)
    private view {
        uint256 _validityIdx = uint256(uint8(_uTokenData>>POS_VALIDITY));

        bytes3 _clr;
        bytes16 _validity = _vValidity[_validityIdx%5];
        bool _lock = false;
        if (_validityIdx == VALID) {
            if (IC9Token(tokenContract).preRedeemable(tokenId)) {
                _clr = "a0f"; // purple
                _validity = "PRE-REDEEMABLE  ";
            }
            else {
                // If validity 0 and locked == getting reedemed
                _lock = uint256(uint8(_uTokenData>>POS_LOCKED)) == LOCKED ? true : false;
                if (_lock) {
                    _clr = "b50"; // orange
                    _validity = "REDEEM PENDING  ";
                }
                else {
                    _clr = "0a0"; // green
                }
            }
        }
        else {
            _clr = "b00"; // red, invalid
        }
        assembly {
            let dst := add(b, 2519)
            mstore(dst, or(and(mload(dst), not(shl(232, 0xFFFFFF))), _clr))
            if gt(_validityIdx, VALID) {
                dst := add(b, 2524)
                mstore(dst, or(and(mload(dst), not(shl(240, 0xFFFF))), "IN"))
            }
            if eq(_lock, true) {
                dst := add(b, 2524)
                mstore(dst, or(and(mload(dst), not(shl(200, 0xFFFFFFFFFFFFFF))), " LOCKED"))
            }
            if gt(_validityIdx, 3) {
                dst := add(b, 2524)
                mstore(dst, or(and(mload(dst), not(shl(200, 0xFFFFFFFFFFFFFF))), "   DEAD"))
            }
            dst := add(b, 2532)
            mstore(dst, or(and(mload(dst), not(shl(240, 0xFFFF))), ">>"))
            dst := add(b, 2535)
            mstore(dst, or(and(mload(dst), not(shl(128, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))), _validity))
            if gt(_validityIdx, 3) {
                dst := add(b, 783)
                mstore(dst, or(and(mload(dst), not(shl(248, 0xFF))), "0")) // grayscale
            }
        }
    }

        /*
     * @dev Adds the `_token` information of fixed sized fields to hardcoded 
     * bytes `b`.
     */
    function addTokenInfo(uint256 _uTokenData, string calldata _name, bytes memory b)
    private view {
        bytes7 _tagtxt = genTagsToAscii(
            uint256(uint8(_uTokenData>>POS_GENTAG)),
            uint256(uint8(_uTokenData>>POS_CNTRYTAG)));
        bytes7 _tushtxt = genTagsToAscii(
            uint256(uint8(_uTokenData>>POS_GENTUSH)),
            uint256(uint8(_uTokenData>>POS_CNTRYTUSH)));
        bytes6 _periods = getNFTAge(
            uint256(uint40(_uTokenData>>POS_MINTSTAMP)));
        bytes4 __mintid = Helpers.flip4Space(bytes4(Helpers.uintToBytes(
            uint256(uint16(_uTokenData>>POS_MINTID)))));
        bytes4 _royalty = Helpers.bpsToPercent(
            uint256(uint16(_uTokenData>>POS_ROYALTY)));
        bytes2 _edition = Helpers.flip2Space(
            Helpers.remove2Null(
                bytes2(Helpers.uintToBytes(
                    uint256(uint8(_uTokenData>>POS_EDITION))
                )
        )));
        (uint256 _bgidx, bytes16 _classer) = _getRarityTier(
            uint256(uint8(_uTokenData>>POS_GENTAG)),
            uint256(uint8(_uTokenData>>POS_RARITYTIER)),
            uint256(uint8(_uTokenData>>POS_SPECIAL))
        );
        bytes3 _rgc2 = uint256(uint8(_uTokenData>>POS_VALIDITY)) < 4 ? hex3[_bgidx] : bytes3("888");
        bytes2 _namesize = getNameSize(uint256(bytes(_name).length));
    
        assembly {
            // Name Font Size
            let dst := add(b, 251)
            mstore(dst, or(and(mload(dst), not(shl(240, 0xFFFF))), _namesize))
            // Colors
            dst := add(b, 484)
            mstore(dst, or(and(mload(dst), not(shl(232, 0xFFFFFF))), _rgc2))
            dst := add(b, 2724)
            mstore(dst, or(and(mload(dst), not(shl(128, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))), _classer))
            // Edition
            let _edcheck := gt(_edition, 9)
            switch _edcheck case 0 {
                dst := add(b, 2793)
            } default {
                dst := add(b, 2792)
            }
            mstore(dst, or(and(mload(dst), not(shl(240, 0xFFFF))), _edition))
            // Mintid
            dst := add(b, 2795)
            mstore(dst, or(and(mload(dst), not(shl(224, 0xFFFFFFFF))), __mintid))
            // Royalty
            dst := add(b, 2590)
            mstore(dst, or(and(mload(dst), not(shl(232, 0xFFFFFF))), _royalty))
            // Timestamps
            dst := add(b, 2828)
            let mask := shl(208, 0xFFFF00000000)
            let srcpart := and(_periods, mask)
            let destpart := and(mload(dst), not(mask))
            mstore(dst, or(destpart, srcpart))
            dst := add(b, 2831)
            mask := shl(208, 0x0000FFFF0000)
            srcpart := and(_periods, mask)
            destpart := and(mload(dst), not(mask))
            mstore(dst, or(destpart, srcpart))
            dst := add(b, 2834)
            mask := shl(208, 0x00000000FFFF)
            srcpart := and(_periods, mask)
            destpart := and(mload(dst), not(mask))
            mstore(dst, or(destpart, srcpart))
            // Gen Country Text
            dst := add(b, 3016)
            mstore(dst, or(and(mload(dst), not(shl(200, 0xFFFFFFFFFFFFFF))), _tagtxt))
            dst := add(b, 3026)
            mstore(dst, or(and(mload(dst), not(shl(200, 0xFFFFFFFFFFFFFF))), _tushtxt))
        }
    }

    function getSVGFlag(uint256 flagId)
    public pure
    returns(bytes memory flag) {
        flag = "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 640 480'>";
        if (flagId == 0) {
            flag = bytes.concat(flag, FLG_CAN);
        }
        else if (flagId == 1) {
            flag = bytes.concat(flag, FLG_CHN);
        }
        else if (flagId == 2) {
            flag = bytes.concat(flag, FLG_GER);
        }
        else if (flagId == 3) {
            flag = bytes.concat(flag, FLG_IND);
        }
        else if (flagId == 4) {
            flag = bytes.concat(flag, FLG_KOR);
        }
        else if (flagId == 5) {
            flag = bytes.concat(flag, FLG_UK);
        }
        else if (flagId == 6) {
            flag = bytes.concat(flag, FLG_US);
        }
        else {
            flag = bytes.concat(flag, FLG_BLK);
        }
        flag = bytes.concat(flag, "</svg>");
    }


    function getBoolean8(uint256 _packedBools, uint256 _boolNumber)
    public pure
    returns (uint8 flag)
    {
        flag = uint8((_packedBools >> _boolNumber) & uint256(1));
    }

    function getBoolean256(uint256 _packedBools, uint256 _boolNumber)
    public pure
    returns (uint256 flag)
    {
        flag = (_packedBools >> _boolNumber) & uint256(1);
    }

    function uintToBytes(uint256 v)
    internal pure
    returns (bytes32 ret) {
        if (v == 0) {
            ret = '0';
        }
        else {
            while (v > 0) {
                ret = bytes32(uint256(ret) / (2 ** 8));
                ret |= bytes32(((v % 10) + 48) * 2 ** (8 * 31));
                v /= 10;
            }
        }
        return ret;
    }

    function uintToDigit(uint256 input)
    public pure
    returns (bytes1) {
        return bytes1(uintToBytes(input));
    }

    function uintToStr(uint256 input)
    public pure
    returns (bytes2) {
        bytes32 b32Input = uintToBytes(input);
        bytes memory output = new bytes(2);
        output[0] = b32Input[0];
        output[1] = b32Input[1];

        if (input < 10) output[1] = 0x20;
        
        return bytes2(output);
    }

    function toXY(uint256 index)
    public pure
    returns (uint256 y, uint256 x) {
        // Convert to true bit index
        if (index > 3) {
            unchecked {index += 10;}
        }
        unchecked {index += 28;}
        unchecked {
            y = index / 17;
            x = index - y*17;
        }
    }

    function _toRect(uint256 x, uint256 y)
    private pure
    returns (bytes memory) {
        return bytes.concat(
            "<rect x='",
            uintToStr(x),
            "' y='",
            uintToStr(y),
            "'/>"
        );
    }

    function _toBar(uint256 x, uint256 multi)
    public pure
    returns (bytes memory b) {
        b = bytes.concat(
            "<rect x='",
            uintToStr(x),
            "' width='",
            uintToDigit(multi),
            "'/>"
        );
    }

    function toRect(uint256 index)
    public pure
    returns (bytes memory) {
        (uint256 y, uint256 x) = toXY(index);
        return _toRect(x, y);
    }

    
    function packedToBits(uint256 packed)
    public pure
    returns (uint8[256] memory bits) {
        for (uint256 i; i<256;) {
            bits[i] = getBoolean8(packed, (255-i));
            unchecked {++i;}
        }
    }

    function packedToRects(uint256 packed)
    public pure 
    returns (bytes memory rects) {
        uint256 bitSwitch;
        for (uint256 i; i<251;) {
            bitSwitch = getBoolean256(packed, (255-i));
            if (bitSwitch == 1) {
                rects = bytes.concat(
                    rects,
                    toRect(i)
                );
            }
            unchecked {++i;}
        }
    }

    function qrSVG(uint256 packed)
    public pure
    returns (string memory svg) {
        svg = string(
            bytes.concat(
                QR_CODE_BASE,
                packedToRects(packed),
                "</svg>"
            )
        );
    }

    function barCodeGroups(uint256 packed)
    public pure
    returns (bytes memory rects) {
        uint256 j;
        for (uint256 i; i<86;) {
            j = 1;
            if (getBoolean256(packed, i) == 1) {
                for (j; j<4;) {                    
                    if (getBoolean256(packed, i+j) == 0) {
                        break;
                    }
                    unchecked {++j;}
                }
                rects = bytes.concat(
                    rects,
                    _toBar(i+14, j)
                );
            }
            unchecked {i += j;}
        }
    }

    function barCodeSVG(uint256 packed)
    public pure
    returns (string memory svg) {
        svg = string(
            bytes.concat(
                BAR_CODE_BASE,
                barCodeGroups(packed),
                "</g></svg>"
            )
        );
    }
}